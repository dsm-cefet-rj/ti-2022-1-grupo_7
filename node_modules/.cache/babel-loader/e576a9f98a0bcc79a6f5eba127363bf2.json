{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { httpGet, httpPost, httpDelete, httpPut } from './utils';\nimport store from './store';\nconst boxAdapter = createEntityAdapter();\nconst initialState = boxAdapter.getInitialState({\n  status: \"not_loaded\",\n  error: null\n});\nconst baseUrl = 'http://localhost:3004/Banco';\nexport const fetchBanco = createAsyncThunk('database/fetchBanco', async () => {\n  return await httpGet(`${baseUrl}/products`);\n});\nexport const deleteBox = createAsyncThunk('database/deleteBox', async idProduct => {\n  await httpDelete(`${baseUrl}/products/${idProduct}`);\n  return idProduct;\n});\nexport const addBox = createAsyncThunk('database/addBox', async product => {\n  return await httpPost(`${baseUrl}/Banco`, product);\n});\nexport const updateBox = createAsyncThunk('database/updateBox', async product => {\n  return await httpPut(`${baseUrl}/Banco/${product.id}`, product);\n});\nexport const openBox = createAsyncThunk('database/openBox', async (product, id) => {\n  const filtro = product.filter(p => `${baseUrl}/Banco/${p.id}` == id);\n  return filtro;\n});\nexport const boxSlice = createSlice({\n  name: \"products\",\n  initialState: initialState,\n  extraReducers: {\n    [fetchBanco.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchBanco.fulfilled]: (state, action) => {\n      state.status = \"loaded\";\n      boxAdapter.setAll(state, action.payload);\n    },\n    [fetchBanco.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    },\n    [deleteBox.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [addBox.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [updateBox.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [deleteBox.fulfilled]: (state, _ref) => {\n      let {\n        payload: id\n      } = _ref;\n      state.status = \"deleted\";\n      boxAdapter.removeOne(state, id);\n    },\n    [addBox.fulfilled]: (state, action) => {\n      state.status = \"saved\";\n      boxAdapter.addOne(state, action.payload);\n    },\n    [updateBox.fulfilled]: (state, action) => {\n      state.status = \"saved\";\n      boxAdapter.upsertOne(state, action.payload);\n    },\n    [openBox.fulfilled]: (state, action) => {\n      state.status = \"saved\";\n      boxAdapter.upsertOne(state, action.payload);\n    }\n  }\n});\nexport default boxSlice.reducer;\nexport const {\n  selectAll: selectAllProducts,\n  selectById: selectProductsById,\n  selectIds: selectProductsIds\n} = boxAdapter.getSelectors(state => state.products); // import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n// const initialProduto = [];\n//  function openBoxReducer(produtos, id){\n//      const filtro = produtos.filter((p) => p.id == id)\n//      return filtro;\n//  }\n// function addBoxReducer(produtos, produto){\n//     let proxId = 1 + produtos.map(p => p.id).reduce((x,y) => Math.max(x,y));\n//     return produtos.concat([{...produto, id: proxId}]);\n// }\n// function deleteBoxReducer(produtos, id){\n//     return produtos.filter((p) => p.id !== id);\n// }\n// export const fetchBanco = createAsyncThunk('Banco/fetchBanco',\n//     async () => {\n//         return await (await fetch('http://localhost:3004/Banco')).json();\n//     });\n// function fullfillProjetosReducer(projetosState, projetosFetched){\n//     return projetosFetched;\n// }\n// export const boxSlice = createSlice({\n//     name:'box',\n//     initialState: initialProduto,\n//     reducers: {\n//         openBox: (state, action) => openBoxReducer (state, action.payload),\n//         addBox: (state , action) => addBoxReducer (state, action.payload),\n//         deleteBox: (state, action) => deleteBoxReducer (state, action.payload)\n//     },\n//     extraReducers: {\n//         [fetchBanco.fulfilled]: (state, action) => fullfillProjetosReducer(state, action.payload),\n//     }\n// })\n// export const { addBox, deleteBox, openBox} = boxSlice.actions\n// export default boxSlice.reducer\n// import {createAsyncThunk, createSlice, createEntityAdapter} from '@reduxjs/toolkit';\n// import { useDispatch } from \"react-redux\";\n// const initialProduto = [];\n// // const bookingsAdapter = createEntityAdapter()\n// function openBoxReducer(produtos, id){\n//     // const filtro = state.produtos.filter((p) => p.id == id);\n//     const filtro = produtos;\n//     return filtro;\n// }\n// function addBoxReducer(produtos, produto){\n//     let proxId = 1 + produtos.map(p => p.id).reduce((x,y) => Math.max(x,y));\n//     return produtos.concat([{...produto, id: proxId}]);\n// }\n// function deleteBoxReducer(produtos, id){\n//     return produtos.filter((p) => p.id !== id);\n// }\n// export const fetchBanco = createAsyncThunk('Banco/fetchBanco',\n//     async () => {\n//         return await (await fetch('http://localhost:3004/Banco')).json();\n// });\n// function fullfillProjetosReducer(projetosState, projetosFetched) {\n//     projetosState.status = 'loaded';\n//     projetosState.produtos = projetosFetched;\n// }\n// export const boxSlice = createSlice({\n//     name: 'box',\n//     initialState: initialProduto,\n//     reducers: {\n//         openBox: (state, action) => openBoxReducer(state, action.payload),\n//         addBox: (state, action) => addBoxReducer(state, action.payload),\n//         deleteBox: (state, action) => deleteBoxReducer(state, action.payload)\n//     },\n//     extraReducers: {\n//         [fetchBanco.fulfilled]: (state, action) => fullfillProjetosReducer(state, action.payload),\n//         [fetchBanco.pending]: (state) => { state.status = 'loading' },\n//         [fetchBanco.rejected]: (state, action) => { state.status = 'failed'; state.erro = action.erro.message }\n//      }\n//  })\n// export const { addBox, deleteBox, openBox} = boxSlice.actions\n// export default boxSlice.reducer\n// export const {\n//     selectAll : selectALLBookings,\n//     selectById: selectBookingById,\n//     selectEntities: selectBookingEntities,\n//     selectTotal: selectBookingsTotal,\n// } = bookingsAdapter.getSelectors(state=>state.bookings)","map":{"version":3,"names":["createAsyncThunk","createEntityAdapter","createSlice","httpGet","httpPost","httpDelete","httpPut","store","boxAdapter","initialState","getInitialState","status","error","baseUrl","fetchBanco","deleteBox","idProduct","addBox","product","updateBox","id","openBox","filtro","filter","p","boxSlice","name","extraReducers","pending","state","action","fulfilled","setAll","payload","rejected","message","removeOne","addOne","upsertOne","reducer","selectAll","selectAllProducts","selectById","selectProductsById","selectIds","selectProductsIds","getSelectors","products"],"sources":["C:/Users/Victor/Desktop/Projeto/PSW/ti-2022-1-grupo_7/src/components/Redux/boxSlice.js"],"sourcesContent":["import { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { httpGet, httpPost, httpDelete, httpPut } from './utils';\nimport store from './store'\n\nconst boxAdapter = createEntityAdapter();\n\nconst initialState = boxAdapter.getInitialState({\n    status: \"not_loaded\",\n    error: null\n});\n\nconst baseUrl = 'http://localhost:3004/Banco';\n\nexport const fetchBanco = createAsyncThunk('database/fetchBanco', async() => {\n    return await httpGet(`${baseUrl}/products`);\n});\n\nexport const deleteBox = createAsyncThunk('database/deleteBox', async(idProduct) => {\n    await httpDelete(`${baseUrl}/products/${idProduct}`);\n    return idProduct;\n});\n\nexport const addBox = createAsyncThunk('database/addBox', async(product) => {\n    return await httpPost(`${baseUrl}/Banco`, product);\n});\n\nexport const updateBox = createAsyncThunk('database/updateBox', async(product) => {\n    return await httpPut(`${baseUrl}/Banco/${product.id}`, product);\n})\n\nexport const openBox = createAsyncThunk('database/openBox', async(product, id) => {\n    const filtro = product.filter((p) => `${baseUrl}/Banco/${p.id}` == id)\n    return filtro;\n})\n\nexport const boxSlice = createSlice({\n    name: \"products\",\n    initialState: initialState,\n    extraReducers: {\n        [fetchBanco.pending]: (state, action) => {state.status = \"loading\"},\n        [fetchBanco.fulfilled]: (state, action) => {state.status = \"loaded\"; boxAdapter.setAll(state, action.payload);},\n        [fetchBanco.rejected]: (state, action) => {state.status = \"failed\"; state.error = action.error.message},\n        [deleteBox.pending]: (state, action) => {state.status = \"loading\"},\n        [addBox.pending]: (state, action) => {state.status = \"loading\"},\n        [updateBox.pending]: (state, action) => {state.status = \"loading\"},\n        [deleteBox.fulfilled]: (state,{payload:id}) => {state.status = \"deleted\"; boxAdapter.removeOne(state, id);},\n        [addBox.fulfilled]: (state, action) => {state.status = \"saved\"; boxAdapter.addOne(state, action.payload);},\n        [updateBox.fulfilled]: (state, action) => {state.status = \"saved\"; boxAdapter.upsertOne(state, action.payload);},\n        [openBox.fulfilled]: (state, action) => {state.status = \"saved\"; boxAdapter.upsertOne(state, action.payload);},\n    }\n})\n\nexport default boxSlice.reducer\n\nexport const {\n    selectAll: selectAllProducts,\n    selectById: selectProductsById,\n    selectIds: selectProductsIds\n} = boxAdapter.getSelectors(state => state.products)\n\n// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n// const initialProduto = [];\n\n\n//  function openBoxReducer(produtos, id){\n//      const filtro = produtos.filter((p) => p.id == id)\n//      return filtro;\n//  }\n\n// function addBoxReducer(produtos, produto){\n//     let proxId = 1 + produtos.map(p => p.id).reduce((x,y) => Math.max(x,y));\n//     return produtos.concat([{...produto, id: proxId}]);\n// }\n\n// function deleteBoxReducer(produtos, id){\n\n//     return produtos.filter((p) => p.id !== id);\n// }\n\n// export const fetchBanco = createAsyncThunk('Banco/fetchBanco',\n//     async () => {\n//         return await (await fetch('http://localhost:3004/Banco')).json();\n//     });\n\n// function fullfillProjetosReducer(projetosState, projetosFetched){\n//     return projetosFetched;\n// }\n\n// export const boxSlice = createSlice({\n//     name:'box',\n//     initialState: initialProduto,\n       \n//     reducers: {\n//         openBox: (state, action) => openBoxReducer (state, action.payload),\n//         addBox: (state , action) => addBoxReducer (state, action.payload),\n//         deleteBox: (state, action) => deleteBoxReducer (state, action.payload)\n//     },\n//     extraReducers: {\n//         [fetchBanco.fulfilled]: (state, action) => fullfillProjetosReducer(state, action.payload),\n//     }\n\n// })\n\n// export const { addBox, deleteBox, openBox} = boxSlice.actions\n// export default boxSlice.reducer\n\n// import {createAsyncThunk, createSlice, createEntityAdapter} from '@reduxjs/toolkit';\n// import { useDispatch } from \"react-redux\";\n\n// const initialProduto = [];\n\n// // const bookingsAdapter = createEntityAdapter()\n\n\n// function openBoxReducer(produtos, id){\n//     // const filtro = state.produtos.filter((p) => p.id == id);\n//     const filtro = produtos;\n//     return filtro;\n// }\n\n// function addBoxReducer(produtos, produto){\n//     let proxId = 1 + produtos.map(p => p.id).reduce((x,y) => Math.max(x,y));\n//     return produtos.concat([{...produto, id: proxId}]);\n// }\n\n// function deleteBoxReducer(produtos, id){\n//     return produtos.filter((p) => p.id !== id);\n// }\n\n// export const fetchBanco = createAsyncThunk('Banco/fetchBanco',\n//     async () => {\n//         return await (await fetch('http://localhost:3004/Banco')).json();\n// });\n\n// function fullfillProjetosReducer(projetosState, projetosFetched) {\n//     projetosState.status = 'loaded';\n//     projetosState.produtos = projetosFetched;\n// }\n\n// export const boxSlice = createSlice({\n//     name: 'box',\n//     initialState: initialProduto,\n\n//     reducers: {\n//         openBox: (state, action) => openBoxReducer(state, action.payload),\n//         addBox: (state, action) => addBoxReducer(state, action.payload),\n//         deleteBox: (state, action) => deleteBoxReducer(state, action.payload)\n//     },\n\n\n\n//     extraReducers: {\n//         [fetchBanco.fulfilled]: (state, action) => fullfillProjetosReducer(state, action.payload),\n//         [fetchBanco.pending]: (state) => { state.status = 'loading' },\n//         [fetchBanco.rejected]: (state, action) => { state.status = 'failed'; state.erro = action.erro.message }\n\n//      }\n//  })\n// export const { addBox, deleteBox, openBox} = boxSlice.actions\n// export default boxSlice.reducer\n\n// export const {\n//     selectAll : selectALLBookings,\n//     selectById: selectBookingById,\n//     selectEntities: selectBookingEntities,\n//     selectTotal: selectBookingsTotal,\n// } = bookingsAdapter.getSelectors(state=>state.bookings)"],"mappings":"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"},"metadata":{},"sourceType":"module"}