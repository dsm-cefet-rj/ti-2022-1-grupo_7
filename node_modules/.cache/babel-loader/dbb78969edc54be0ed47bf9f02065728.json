{"ast":null,"code":"// import {createAsyncThunk, createSlice, createEntityAdapter} from '@reduxjs/toolkit';\n// import { useDispatch } from \"react-redux\";\n// const initialProduto = {\n//     status:'notloaded',\n//     produtos:[],\n//     erro:null\n// };\n// const bookingsAdapter = createEntityAdapter()\n// function openBoxReducer(state, id){\n//     // const filtro = state.produtos.filter((p) => p.id == id);\n//     const filtro = state.produtos;\n//     return filtro;\n// }\n// function addBoxReducer(state, produto){\n//     let proxId = 1 + state.produtos.map(p => p.id).reduce((x,y) => Math.max(x,y));\n//     return state.produtos.concat([{...produto, id: proxId}]);\n// }\n// function deleteBoxReducer(state, id){\n//     return state.produtos.filter((p) => p.id !== id);\n// }\n// export const fetchBanco = createAsyncThunk('Banco/fetchBanco',\n//     async () => {\n//         return await (await fetch('http://localhost:3004/Banco')).json();\n// });\n// function fullfillProjetosReducer(projetosState, projetosFetched) {\n//     projetosState.status = 'loaded';\n//     projetosState.produtos = projetosFetched;\n// }\n// export const boxSlice = createSlice({\n//     name: 'box',\n//     initialState: initialProduto,\n//     reducers: {\n//         openBox: (state, action) => openBoxReducer(state, action.payload),\n//         addBox: (state, action) => addBoxReducer(state, action.payload),\n//         deleteBox: (state, action) => deleteBoxReducer(state, action.payload)\n//     },\n//     extraReducers: {\n//         [fetchBanco.fulfilled]: (state, action) => fullfillProjetosReducer(state, action.payload),\n//         [fetchBanco.pending]: (state) => { state.status = 'loading' },\n//         [fetchBanco.rejected]: (state, action) => { state.status = 'failed'; state.erro = action.erro.message }\n//     }\n// })\n// export const { addBox, deleteBox, openBox} = boxSlice.actions\n// export default boxSlice.reducer\n// export const {\n//     selectAll : selectALLBookings,\n//     selectById: selectBookingById,\n//     selectEntities: selectBookingEntities,\n//     selectTotal: selectBookingsTotal,\n// } = bookingsAdapter.getSelectors(state=>state.bookings)","map":{"version":3,"names":[],"sources":["C:/Users/Victor/Desktop/Projeto/PSW/ti-2022-1-grupo_7/src/components/Redux/boxSlice.js"],"sourcesContent":["// import {createAsyncThunk, createSlice, createEntityAdapter} from '@reduxjs/toolkit';\n// import { useDispatch } from \"react-redux\";\n\n// const initialProduto = {\n//     status:'notloaded',\n//     produtos:[],\n//     erro:null\n// };\n\n// const bookingsAdapter = createEntityAdapter()\n\n\n// function openBoxReducer(state, id){\n//     // const filtro = state.produtos.filter((p) => p.id == id);\n//     const filtro = state.produtos;\n//     return filtro;\n// }\n\n// function addBoxReducer(state, produto){\n//     let proxId = 1 + state.produtos.map(p => p.id).reduce((x,y) => Math.max(x,y));\n//     return state.produtos.concat([{...produto, id: proxId}]);\n// }\n\n// function deleteBoxReducer(state, id){\n//     return state.produtos.filter((p) => p.id !== id);\n// }\n\n// export const fetchBanco = createAsyncThunk('Banco/fetchBanco',\n//     async () => {\n//         return await (await fetch('http://localhost:3004/Banco')).json();\n// });\n\n// function fullfillProjetosReducer(projetosState, projetosFetched) {\n//     projetosState.status = 'loaded';\n//     projetosState.produtos = projetosFetched;\n// }\n\n// export const boxSlice = createSlice({\n//     name: 'box',\n//     initialState: initialProduto,\n\n//     reducers: {\n//         openBox: (state, action) => openBoxReducer(state, action.payload),\n//         addBox: (state, action) => addBoxReducer(state, action.payload),\n//         deleteBox: (state, action) => deleteBoxReducer(state, action.payload)\n//     },\n//     extraReducers: {\n//         [fetchBanco.fulfilled]: (state, action) => fullfillProjetosReducer(state, action.payload),\n//         [fetchBanco.pending]: (state) => { state.status = 'loading' },\n//         [fetchBanco.rejected]: (state, action) => { state.status = 'failed'; state.erro = action.erro.message }\n\n//     }\n\n// })\n// export const { addBox, deleteBox, openBox} = boxSlice.actions\n// export default boxSlice.reducer\n\n// export const {\n//     selectAll : selectALLBookings,\n//     selectById: selectBookingById,\n//     selectEntities: selectBookingEntities,\n//     selectTotal: selectBookingsTotal,\n// } = bookingsAdapter.getSelectors(state=>state.bookings)"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}