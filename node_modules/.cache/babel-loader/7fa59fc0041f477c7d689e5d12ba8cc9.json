{"ast":null,"code":"import { createAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { httpPost } from './utils'; // const baseUrl = 'http://localhost:3004';\n// export const login = createAsyncThunk(\"user/login\", async (credentials) => {\n//     return await httpPost(`${baseUrl}/users/login`, credentials);\n// });\n// export const signUp = createAsyncThunk(\"user/signup\", async (credentials) => {\n//     return await httpPost(`${baseUrl}/users/signup`, credentials);\n// });\n// const initialState = {\n//     token: \"\",\n//     userInfo: {\n//         email: \"\",\n//         isSeller: false\n//     },\n//     count: 0,\n//     profileStats: {\n//         name: \"Nome do Cliente\",\n//         username: \"teste\",\n//         pic: process.env.PUBLIC_URL + \"/static/media/exemplo1.7ca3377e5e8501c6a6bd.jpeg\",\n//         photoCount: 2,\n//         stars: 4.5,\n//         followers: 500, \n//         following: 500\n//     }\n// };\n\nexport const logout = createAction('user/logout'); // const userSlice = createSlice({\n//     name: 'user',\n//     initialState,\n//     reducers: {\n//         logout: () => initialState,\n//     },\n//     extraReducers: {\n//         [login.pending]: (state) => { state.status = \"loading\"; },\n//         [login.fulfilled]: (state, action) => {\n//             const { token, name, email, profilePicture: pic, isSeller, username } = action.payload;\n//             return { \n//                 ...state,\n//                 status: \"loaded\",\n//                 token,\n//                 userInfo: { ...state.userInfo, email, isSeller, name }, \n//                 profileStats: {...state.profileStats, pic, username}\n//             };\n//         },\n//         [login.rejected]: (state, action) => {\n//             state.status = \"failed\";\n//             state.error = action.error.message;\n//         },\n//         [signUp.pending]: (state) => { state.status = \"loading\"; },\n//         [signUp.rejected]: (state, action) => {\n//             state.status = \"failed\";\n//             state.error = action.error.message;\n//         },\n//     }\n// })\n\nexport default userSlice.reducer;","map":{"version":3,"names":["createAction","createAsyncThunk","createSlice","httpPost","logout","userSlice","reducer"],"sources":["C:/Users/Victor/Desktop/Projeto/PSW/ti-2022-1-grupo_7-front-end/src/components/Redux/UserSlice.js"],"sourcesContent":["import { createAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { httpPost } from './utils';\r\n\r\n// const baseUrl = 'http://localhost:3004';\r\n\r\n// export const login = createAsyncThunk(\"user/login\", async (credentials) => {\r\n//     return await httpPost(`${baseUrl}/users/login`, credentials);\r\n// });\r\n\r\n// export const signUp = createAsyncThunk(\"user/signup\", async (credentials) => {\r\n//     return await httpPost(`${baseUrl}/users/signup`, credentials);\r\n// });\r\n\r\n// const initialState = {\r\n//     token: \"\",\r\n//     userInfo: {\r\n//         email: \"\",\r\n//         isSeller: false\r\n//     },\r\n//     count: 0,\r\n//     profileStats: {\r\n//         name: \"Nome do Cliente\",\r\n//         username: \"teste\",\r\n//         pic: process.env.PUBLIC_URL + \"/static/media/exemplo1.7ca3377e5e8501c6a6bd.jpeg\",\r\n//         photoCount: 2,\r\n//         stars: 4.5,\r\n//         followers: 500, \r\n//         following: 500\r\n//     }\r\n// };\r\n\r\nexport const logout = createAction('user/logout');\r\n\r\n// const userSlice = createSlice({\r\n//     name: 'user',\r\n//     initialState,\r\n//     reducers: {\r\n//         logout: () => initialState,\r\n//     },\r\n//     extraReducers: {\r\n//         [login.pending]: (state) => { state.status = \"loading\"; },\r\n//         [login.fulfilled]: (state, action) => {\r\n//             const { token, name, email, profilePicture: pic, isSeller, username } = action.payload;\r\n//             return { \r\n//                 ...state,\r\n//                 status: \"loaded\",\r\n//                 token,\r\n//                 userInfo: { ...state.userInfo, email, isSeller, name }, \r\n//                 profileStats: {...state.profileStats, pic, username}\r\n//             };\r\n//         },\r\n//         [login.rejected]: (state, action) => {\r\n//             state.status = \"failed\";\r\n//             state.error = action.error.message;\r\n//         },\r\n//         [signUp.pending]: (state) => { state.status = \"loading\"; },\r\n//         [signUp.rejected]: (state, action) => {\r\n//             state.status = \"failed\";\r\n//             state.error = action.error.message;\r\n//         },\r\n//     }\r\n// })\r\n\r\nexport default userSlice.reducer"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,EAAyCC,WAAzC,QAA4D,kBAA5D;AACA,SAASC,QAAT,QAAyB,SAAzB,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAGJ,YAAY,CAAC,aAAD,CAA3B,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeK,SAAS,CAACC,OAAzB"},"metadata":{},"sourceType":"module"}